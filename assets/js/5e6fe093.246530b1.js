"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4178],{4165:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var i=s(6070),t=s(5296);const r={sidebar_position:3,description:"Basic datatypes in everyday life"},a="Data types",l={id:"essentials/basic-lua/data-types",title:"Data types",description:"Basic datatypes in everyday life",source:"@site/docs/essentials/basic-lua/data-types.md",sourceDirName:"essentials/basic-lua",slug:"/essentials/basic-lua/data-types",permalink:"/Roblox-Studio-Guide/docs/essentials/basic-lua/data-types",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/essentials/basic-lua/data-types.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"Basic datatypes in everyday life"},sidebar:"tutorialSidebar",previous:{title:"Syntax",permalink:"/Roblox-Studio-Guide/docs/essentials/basic-lua/basic-syntax"},next:{title:"Practice",permalink:"/Roblox-Studio-Guide/docs/essentials/basic-lua/practice"}},o={},d=[{value:"List of data types",id:"list-of-data-types",level:2},{value:"Number",id:"number",level:3},{value:"String",id:"string",level:3},{value:"Boolean",id:"boolean",level:3},{value:"Nil",id:"nil",level:3}];function c(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"data-types",children:"Data types"})}),"\n",(0,i.jsx)(n.admonition,{title:"what will you learn",type:"note",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Data types in lua"}),"\n",(0,i.jsx)(n.li,{children:"How to express data types in your code"}),"\n",(0,i.jsx)(n.li,{children:"Small introduction to variables"}),"\n"]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"list-of-data-types",children:"List of data types"}),"\n",(0,i.jsx)(n.p,{children:"In this lesson we will only discuss the most common data types that are being used in lua. There will be more complex types and eventually we will be discussing about the luau type system."}),"\n",(0,i.jsx)(n.admonition,{title:"the data types we will learn today",type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"number"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"string"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"boolean"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"nil"})}),"\n"]})}),"\n",(0,i.jsx)(n.h3,{id:"number",children:"Number"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"number"})," data type is represented as a number. It can be written as a ",(0,i.jsx)(n.code,{children:"123"})," or with decimals ",(0,i.jsx)(n.code,{children:"123.123"}),". Lua like other languages supports ",(0,i.jsx)(n.em,{children:"hexadecimal"})," numbers as a way to represent numbers for example ",(0,i.jsx)(n.code,{children:"0x20"}),". You can do math operations with it just like how a calculator deals with numbers."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"--we can do addition by using `+` operator\nprint(1 + 0x20) -- 33\n"})}),"\n",(0,i.jsxs)(n.admonition,{title:"different types of numbers",type:"info",children:[(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"integer"})," refers to a whole number. Without decimal"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"floating point"})," refers to a number with decimals"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"signed integer"})," is a number that can be supports as both positive and negative"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"unsigned integer"})," is a number that only supports positive numbers"]}),"\n"]}),(0,i.jsxs)(n.p,{children:["Lua numbers doesn't have all these special fancy words for their ",(0,i.jsx)(n.code,{children:"number"})," type. But it is still used for the ",(0,i.jsx)(n.code,{children:"buffer"})," library and knowing how numbers work is very important. There are more number types that I mentioned there, but that should give a very solid understanding you continue the tutorial."]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"string",children:"String"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"string"})," is a data type that allows ",(0,i.jsx)(n.strong,{children:"anything"})," to be put inside it. There are built-in ",(0,i.jsx)(n.em,{children:"libraries"})," that can deal with strings. And you could print out strings to make your code more polished and more human readable."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local foo = "bar" -- this is a variable, similar to scratch\'s variables\nprint(\'this is a string\') --output: this is a string\nprint("doubled quoted string!") --output: double quoted string!\nprint([[[long string]]) --output [long string\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["There is ",(0,i.jsx)(n.em,{children:"barely"})," any reason why you should use ",(0,i.jsx)(n.code,{children:"[[]]"})," for writing strings. It makes your code hard to read. ",(0,i.jsx)(n.em,{children:"Most of us"})," agree on using ",(0,i.jsx)(n.code,{children:'""'})," to write our strings. This is because of the ",(0,i.jsx)(n.strong,{children:"styling guide"})," made to enforce predictable and clean code."]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"boolean",children:"Boolean"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"boolean"})," data type only supports two values: ",(0,i.jsx)(n.code,{children:"true"})," or ",(0,i.jsx)(n.code,{children:"false"}),". Unlike strings, you ",(0,i.jsx)(n.em,{children:"do not"})," need to wrap ",(0,i.jsx)(n.code,{children:"true"})," and ",(0,i.jsx)(n.code,{children:"false"})," into quotation marks. Boolean types are usually used to indicate if something is true or false. Similar to scratch, ",(0,i.jsx)(n.em,{children:"usually"})," we would use boolean types for ",(0,i.jsx)(n.code,{children:"if then"})," statements."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"print(true) --output: true\nprint(false) --output: false\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"why can't we just use strings",type:"note",children:(0,i.jsxs)(n.p,{children:["My personal answer (I might be wrong) is because true and false is so common, using a string will not be ",(0,i.jsx)(n.strong,{children:"as efficient"})," than representing it as a boolean. Since it is only ",(0,i.jsx)(n.code,{children:"true"})," and ",(0,i.jsx)(n.code,{children:"false"}),", some programming languages might just assign it into a 1 bit value, which reduces ",(0,i.jsx)(n.em,{children:"memory"})," and makes programs run faster."]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"nil",children:"Nil"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"nil"})," value is means nothing, literally nothing."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"print(nil) --output: nil\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"what can we do with nil",type:"note",children:(0,i.jsxs)(n.p,{children:["You might think ",(0,i.jsx)(n.code,{children:"nil"})," is entirely useless. But as you dig deeper into programming nil could be more efficient than a string saying ",(0,i.jsx)(n.code,{children:'"nothing"'}),". Also it ",(0,i.jsx)(n.em,{children:"doesn't"})," passes through the ",(0,i.jsx)(n.em,{children:"truthiness"})," check unlike strings. It can be used to remove some ",(0,i.jsx)(n.code,{children:"keys"}),"/",(0,i.jsx)(n.code,{children:"value"})," in the ",(0,i.jsx)(n.code,{children:"table"}),", and much more! We will introduce them later in the tutorial."]})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},5296:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var i=s(758);const t={},r=i.createContext(t);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);